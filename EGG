warn("[Fox's Hub] Loading Hack v24")

local Players = game.Players

local Player = Players.LocalPlayer

local PG = Player:FindFirstChild('PlayerGui')

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local VirtualUser = game:GetService('VirtualUser')

local PlayerFolder = ReplicatedStorage:FindFirstChild(Player.UserId..'Client')

local ClientEvents = ReplicatedStorage.Client

local GetElement = ClientEvents.GetElement
local GetSpins = ClientEvents.GetSpins

local AbilityRarities = ClientEvents.GetRarities:InvokeServer()

local UI

while not UI and wait() do
	pcall(function()
		UI = game:GetObjects("rbxassetid://"..6469772512)[1]
	end)
end

UI.ResetOnSpawn = false

if syn then
	syn.protect_gui(UI)
end

UI.Parent = game:GetService('CoreGui')

local Sounds = UI:FindFirstChild('Sounds')

local Selection = UI.Frame.Frame.Frame
local CurrentUI = UI.Frame.Current.Frame
local ConfirmUI = UI.Confirm
local ElementSelectionUI = UI.Frame.Frame.ElementSelector.Frame.ScrollingFrame

local Rarities = Selection.Rarities
local Farms = Selection.FarmingType
local ToggleESP = UI.Frame.ESP.Frame.Label.TextLabel.Activate
local LogUI = UI.Frame.Logs.ScrollingFrame

local CurrentElementUI = CurrentUI.Ability
local NewAbilityButton = CurrentUI.NewAbility.TextLabel.TextButton

local ToggleElements = Selection.ToggleElements.TextLabel.Activate

local ESPs = UI.ESP

local ESPLayout = ESPs:WaitForChild('Layout')

local AddESP = Instance.new("BindableEvent")

local ESPActive = false

local CurrentSelected

local Connections = {}

local ActiveRarity = {
	['Myth'] = false;
	['Legend'] = false;
	['Rare'] = false;
	['Uncommon'] = false;
	['Common'] = false;
}

local ActiveElements = {}

local Farmings = {
	['Spins'] = false;
	['Levels'] = false;
	['Ability'] = false;
}

local RarityColors = {
	['Myth'] = Color3.fromRGB(255, 112, 10);
	['Legend'] = Color3.fromRGB(170, 85, 255);
	['Rare'] = Color3.fromRGB(0, 85, 255);
	['Uncommon'] = Color3.fromRGB(0, 255, 0);
	['Common'] = Color3.fromRGB(0,0,0);
}

local Elements = {}

local Logged = {}

local SearchTerm = ''

function UpdateLogs(Element, Rarity)
	local Time = os.time()
	
	local Date, Hour = os.date('%x', Time), os.date('%X', Time)
	
	if not Logged[Element] then Logged[Element] = {} end
	
	table.insert(Logged[Element], #Logged[Element]+1, {['Date'] = Date; ['Hour'] = Hour})
	
	local NewUI = UI.LogLayout.LogLayout:Clone()
	
	NewUI.Text = Element .. ' '.. Date ..' '.. Hour
	
	if RarityColors[Rarity] then
		NewUI.TextStrokeColor3 = RarityColors[Rarity]
		NewUI.TextStrokeTransparency = .5
	end
	
	NewUI.Name = Element
	
	NewUI.LayoutOrder = -(#LogUI:GetChildren())
	NewUI.Parent = LogUI
	
	NewUI.Visible = (SearchTerm == '' or string.lower(Element):find(SearchTerm))
end

LogUI.UIListLayout.Changed:connect(function()
	LogUI.CanvasSize = UDim2.fromOffset(0, LogUI.UIListLayout.AbsoluteContentSize.Y)
end)

LogUI.Parent.Clear.TextLabel.Activate.MouseButton1Click:connect(function()
	for i,v in pairs(LogUI:GetChildren()) do
		if v:IsA('TextButton') then
			v:Destroy()
		end
	end
end)

LogUI.Parent.Search.Changed:connect(function()
	SearchTerm = string.lower(LogUI.Parent.Search.Text)
	
	for i,v in pairs(LogUI:GetChildren()) do
		if v:IsA('TextButton') then
			v.Visible = (SearchTerm == '' or string.lower(v.Name):find(SearchTerm))
		end
	end
end)

LogUI.Parent.Search.Text = ''

function UpdateSpins()
	local AmountOfSpins = GetSpins:InvokeServer()

	CurrentUI.Spins.Text = 'Spins: '..AmountOfSpins
end

function CheckForSpaces(Ability)
	local NewAbilityName = ''

	for i = 1, #Ability do
		if string.upper(Ability:sub(i,i)) == Ability:sub(i,i) then
			if i ~= 1 then
				NewAbilityName = NewAbilityName..' '
			end
		end

		NewAbilityName = NewAbilityName..Ability:sub(i,i)
	end

	return NewAbilityName
end

for i,v in pairs(Player.PlayerScripts.ClientEffects:GetChildren()) do
	if v:IsA('Folder') then
		local AbilityName = CheckForSpaces(v.Name)

		Elements[AbilityName] = {}

		for i,v in pairs(v:GetChildren()) do
			table.insert(Elements[AbilityName], CheckForSpaces(v.Name))
		end
	end
end

function UpdateAbilityUI()
	local Element = GetElement:InvokeServer()

	CurrentElementUI.Text = Element

	for _, AbilityInfo in pairs(AbilityRarities) do
		if AbilityInfo[1] == Element then
			local Rarity = AbilityInfo[3]

			if RarityColors[Rarity] then
				CurrentElementUI.TextStrokeColor3 = RarityColors[Rarity]
				CurrentElementUI.TextStrokeTransparency = .5
			end

			break
		end
	end
end

function Check(AbilityName, AbilityRarity)
	if ActiveRarity[AbilityRarity] or ActiveElements[AbilityName] then
		if Sounds then
			Sounds.Success:Play()
		end
		
		return true
	end
end

function GetNewAbility()
	local NewAbility = ReplicatedStorage.Client.Spin:InvokeServer()[1]

	for _, AbilityInfo in pairs(AbilityRarities) do
		if AbilityInfo[1] == NewAbility then
			UpdateSpins()
			UpdateAbilityUI()
			UpdateLogs(AbilityInfo[1], AbilityInfo[3])
			
			return AbilityInfo[1], AbilityInfo[3]
		end
	end
end

function FarmAbility()
	local RarityEnabled = false

	for i,v in pairs(ActiveRarity) do
		if v then
			RarityEnabled = v
			break
		end
	end
	
	if not RarityEnabled then
		for i,v in pairs(ActiveElements) do
			if v then
				RarityEnabled = v
				break
			end
		end
	end

	if RarityEnabled then
		while wait() and Farmings.Ability and RarityEnabled do
			RarityEnabled = false

			for i,v in pairs(ActiveRarity) do
				if v then
					RarityEnabled = v
					break
				end
			end
			
			if not RarityEnabled then
				for i,v in pairs(ActiveElements) do
					if v then
						RarityEnabled = v
						break
					end
				end
			end

			if RarityEnabled then
				local AbilityName, AbilityRarity = GetNewAbility()

				if Check(AbilityName, AbilityRarity) then
					CurrentSelected = 'Levels'
					Farmings.Ability = false
					Farmings.Levels = true
					FixUI()
					FarmingFunctions()
					break
				elseif GetSpins:InvokeServer() == 0 then
					Farmings.Ability = false
					Farmings.Spins = true
					FixUI()
					FarmingFunctions()
					break
				end
			else
				if Sounds then
					Sounds.Error:Play()
				end
			end
		end

		Farms.Ability.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
		Farmings.Ability = false
		CurrentSelected = nil
	else
		Farms.Ability.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
		Farmings.Ability = false
		CurrentSelected = nil
		if Sounds then
			Sounds.Error:Play()
		end
	end
end

function Attack()
	for i,v in pairs(Player.Backpack:GetChildren()) do
		PlayerFolder.StartMove:FireServer(v.Name)
		PlayerFolder.EndMove:FireServer(v.Name)
	end
end

function CheckDied(Humanoid)
	local IGUI = PG:FindFirstChild('IntroGui')
	local SGUI = PG:FindFirstChild('StatsGui')
	if Humanoid then
		if IGUI and SGUI then
			if IGUI.Enabled then
				if Humanoid.Health > 0 then
					ClientEvents.Intro:InvokeServer()
					ClientEvents.Teleport:InvokeServer()
					IGUI.Enabled = false
					SGUI.Enabled = true
					local Camera = workspace.CurrentCamera
					Camera.CameraType = "Custom"
					Camera.CameraSubject = Humanoid
					wait(.5)
				end
			end
		end
	end
end

function FarmSpins()
	while Farmings.Spins and wait() do
		local Level = 0
		wait()
		if Farmings.Spins then
			local Character = Player.Character

			if Character then
				local Head = Character:FindFirstChild('Head')
				local Humanoid = Character:FindFirstChildWhichIsA('Humanoid')

				if Head and Humanoid then
					CheckDied(Humanoid)

					if Head:FindFirstChild('LevelBoard') then
						Level = tonumber(Head.LevelBoard.Frame.TextLabel.Text)
					else
						Level = 0
					end

					Humanoid:UnequipTools()

					Attack()

					if Level >= 2 and Farmings.Spins then
						local AbilityName, AbilityRarity = GetNewAbility()
						Humanoid.Health = 0
						Level = 0
						
						if Check(AbilityName, AbilityRarity) then
							CurrentSelected = 'Levels'
							Farmings.Spins = false
							Farmings.Levels = true
							FixUI()
							FarmingFunctions()
							break
						end
					end
				end
			end
		end
	end
end

function FarmLevels()
	while Farmings.Levels and wait() do
		local Character = Player.Character

		if Character then
			local Humanoid = Character:FindFirstChildWhichIsA('Humanoid')
			if Humanoid then
				CheckDied(Humanoid)

				Humanoid:UnequipTools()

				Attack()
			end
		end
	end
end

function FarmingFunctions()
	if Farmings.Spins then
		FarmSpins()
	elseif Farmings.Ability then
		FarmAbility()
	elseif Farmings.Levels then
		FarmLevels()
	end
end

function GetOthersElement(InPerson, Backpack)
	for ElementName, ElementAttacks in pairs(Elements) do
		for _,ElementAttack in pairs(ElementAttacks) do
			if InPerson then
				if InPerson.Name == ElementAttack then
					return ElementName
				end
			end
			if Backpack:FindFirstChild(ElementAttack) then
				return ElementName
			end
		end
	end
end

AddESP.Event:connect(function(Character)
	local FindPlayer = game.Players:GetPlayerFromCharacter(Character)

	if ESPActive and FindPlayer then
		local Head = Character:WaitForChild('Head')

		if ESPs:FindFirstChild(Character.Name) then ESPs:FindFirstChild(Character.Name):Destroy() end

		if Head then

			local Text = ''

			local NewESP = ESPLayout:Clone()

			NewESP.Name = Character.Name

			NewESP.Adornee = Head
			NewESP.Parent = ESPs

			local Level = 0

			local Backpack = FindPlayer.Backpack
			local InPerson = Character:FindFirstChildWhichIsA('Tool')

			local PlayerElement = GetOthersElement(InPerson, Backpack)

			repeat
				if not PlayerElement then
					PlayerElement = GetOthersElement(InPerson, Backpack)
					wait()
				end
			until PlayerElement

			local LevelBoard = Head:FindFirstChild('LevelBoard')

			if LevelBoard then
				Level = tonumber(LevelBoard.Frame.TextLabel.Text)

				local LevelBoardChanged = LevelBoard.Frame.TextLabel.Changed:connect(function()
					if LevelBoard.Parent ~= nil then
						Level = tonumber(LevelBoard.Frame.TextLabel.Text)

						if PlayerElement then
							Text = Character.Name..' | '.. Level..  ' | '.. PlayerElement

							if NewESP:FindFirstChild('TextLabel') then
								NewESP.TextLabel.Text = Text
							end
						end
					end
				end)

				table.insert(Connections[Character.Name], LevelBoardChanged)
			end

			if PlayerElement then
				Text = Character.Name..' | '.. Level..  ' | '.. PlayerElement
			end

			if NewESP:FindFirstChild('TextLabel') then
				NewESP.TextLabel.Text = Text

				NewESP.Enabled = true
			end
		end
	end
end)

function CharacterFunction(AddPlayer)
	local CharacterAdded = AddPlayer.CharacterAdded:connect(function(Character)
		if Character.Name == Player.Name then
			local Humanoid = Character:WaitForChild('Humanoid')

			local Connection2 = Humanoid.HealthChanged:connect(function()
				UpdateSpins()
			end)
		end

		if Connections[Character.Name] then
			for i,v in pairs(Connections[Character.Name]) do
				if i > 1 then
					v:Disconnect()
				end
			end
		end

		local Humanoid = Character:WaitForChild('Humanoid', 10)

		if Humanoid then
			if Humanoid.Health <= 0 then
				repeat
					wait()
				until Humanoid.Health > 0
			end

			AddESP:Fire(Character)
		end
	end)

	Connections[AddPlayer.Name] = {CharacterAdded}

	local Character = AddPlayer.Character

	if Character then
		AddESP:Fire(Character)
	end
end

function ClearESPs()
	for i,v in pairs(Connections) do
		for i, v in pairs(v) do
			v:Disconnect()
		end
	end

	for i,v in pairs(ESPs:GetChildren()) do
		if v.Name ~= 'Layout' then
			v:Destroy()
		end
	end
end


for i,v in pairs(Rarities:GetChildren()) do
	if v:IsA('TextButton') then
		v.Frame.ImageButton.MouseButton1Click:connect(function()
			Sounds.Click:Play()

			ActiveRarity[v.Name] = (not ActiveRarity[v.Name])

			if not ActiveRarity[v.Name] then
				v.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
			else
				v.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			end
		end)
	end
end

function FixUI()
	for _,GUI in pairs(Farms:GetChildren()) do
		if GUI:IsA('TextButton') then
			GUI.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
			if GUI.Name ~= CurrentSelected then
				Farmings[GUI.Name] = false
			elseif Farmings[GUI.Name] then
				GUI.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			else
				GUI.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
			end
		end
	end
end

ConfirmUI.Confirm.TextLabel.ImageButton.MouseButton1Click:connect(function()
	if CurrentSelected then
		Farmings[CurrentSelected] = true
		
		ConfirmUI.Visible = false
		
		FixUI()

		FarmingFunctions()
	end
end)

ConfirmUI.Decline.TextLabel.ImageButton.MouseButton1Click:connect(function()
	CurrentSelected = nil
	ConfirmUI.Visible = false
end)

ToggleElements.MouseButton1Click:connect(function()
	Sounds.Click:Play()
	ElementSelectionUI.Parent.Parent.Visible = (not ElementSelectionUI.Parent.Parent.Visible)
end)

for i,v in pairs(Farms:GetChildren()) do
	if v:IsA('TextButton') then
		v.Frame.ImageButton.MouseButton1Click:connect(function()
			if CurrentSelected ~= nil and CurrentSelected ~= v.Name then
				Farmings[CurrentSelected] = false
				CurrentSelected = nil
				wait(.5)
			end
			
			if not ConfirmUI.Visible and not Farmings[CurrentSelected] and CurrentSelected == nil then
				Sounds.Click:Play()
				CurrentSelected = v.Name
				ConfirmUI.Label.TextLabel.Text = 'Start '..v.Name..' Farming'
				ConfirmUI.Visible = true
			elseif Farmings[CurrentSelected] then
				Farmings[CurrentSelected] = false
				CurrentSelected = nil
				FixUI()
			end
		end)
	end
end

for i,v in pairs(ElementSelectionUI:GetChildren()) do
	if v:IsA('TextButton') then
		v.Frame.ImageButton.MouseButton1Click:connect(function()
			if not ActiveElements[v.Name] then
				ActiveElements[v.Name] = true
				v.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			else
				ActiveElements[v.Name] = nil
				v.Frame.ImageButton.BackgroundColor3 = Color3.fromRGB(27, 42, 53)
			end
		end)
	end
end

Players.PlayerAdded:connect(function(AddPlayer)
	CharacterFunction(AddPlayer)
end)

Players.PlayerRemoving:connect(function(RemovePlayer)
	if Connections[RemovePlayer.Name] then
		for i,v in pairs(Connections[RemovePlayer.Name]) do
			v:Disconnect()
		end
	end

	if ESPs:FindFirstChild(RemovePlayer.Name) then
		ESPs:FindFirstChild(RemovePlayer.Name):Destroy()
	end
end)

ToggleESP.MouseButton1Click:connect(function()
	Sounds.Click:Play()

	ESPActive = (not ESPActive)

	if not ESPActive then
		ClearESPs()
	else
		for i,v in pairs(Players:GetPlayers()) do
			CharacterFunction(v)
		end
	end
end)

NewAbilityButton.MouseButton1Click:connect(function()
	Sounds.Click:Play()

	GetNewAbility()
end)

game:GetService('UserInputService').InputBegan:connect(function(Input)
	if Input.KeyCode == Enum.KeyCode.RightControl then
		UI.Enabled = (not UI.Enabled)
	elseif Input.KeyCode == Enum.KeyCode.Delete then
		ClearESPs()
		ESPActive = false

		for i,v in pairs(Farmings) do
			Farmings[i] = false
		end

		UI:Destroy()
		script:Destroy()
	end
end)

Player.Idled:connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)

UpdateSpins()
UpdateAbilityUI()
